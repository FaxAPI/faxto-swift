//
// UserManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UserManagementAPI: APIBase {
    /**
     This API creates a subuser
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the subuser 
     - parameter apiKey: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func subUserPost(email email: , password: , apiKey: String, completion: ((data: InlineResponse2006?, error: ErrorType?) -> Void)) {
        subUserPostWithRequestBuilder(email: email, password: password, apiKey: apiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     This API creates a subuser
     - POST /subuser
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the subuser 
     - parameter apiKey: (header)  

     - returns: RequestBuilder<InlineResponse2006> 
     */
    public class func subUserPostWithRequestBuilder(email email: , password: , apiKey: String) -> RequestBuilder<InlineResponse2006> {
        let path = "/subuser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = password.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "api_key": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     This API is used for logging in on an existing user account
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userLoginPost(email email: , password: , completion: ((data: InlineResponse2005?, error: ErrorType?) -> Void)) {
        userLoginPostWithRequestBuilder(email: email, password: password).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     This API is used for logging in on an existing user account
     - POST /user/login
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the user 

     - returns: RequestBuilder<InlineResponse2005> 
     */
    public class func userLoginPostWithRequestBuilder(email email: , password: ) -> RequestBuilder<InlineResponse2005> {
        let path = "/user/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = password.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     This API registers a new user account
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func userPost(email email: , password: , completion: ((data: InlineResponse2005?, error: ErrorType?) -> Void)) {
        userPostWithRequestBuilder(email: email, password: password).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     This API registers a new user account
     - POST /user
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     - examples: [{contentType=application/json, example={
  "api_key" : "api_key",
  "status" : "status"
}}, {contentType=application/xml, example=<null>
  <status>aeiou</status>
  <api_key>aeiou</api_key>
</null>}]
     
     - parameter email: (body) The unique email of the user 
     - parameter password: (body) The password of the user 

     - returns: RequestBuilder<InlineResponse2005> 
     */
    public class func userPostWithRequestBuilder(email email: , password: ) -> RequestBuilder<InlineResponse2005> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = password.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
